---
- name: debug
  debug:
    msg: "jeste httpde"

- block:
    - name: install policycoreutils
      yum:
        name: policycoreutils-python
      when: ansible_distribution_major_version == "7"

    - name: install policycoreutils
      yum:
        name: policycoreutils-python-utils
      when: ansible_distribution_major_version == "8"

    - name: install remi release
      yum:
        name: "https://rpms.remirepo.net/enterprise/remi-release-{{ ansible_distribution_major_version }}.rpm"
        disable_gpg_check: true

    - name: install httpd and php
      yum:
        name:
          - httpd
          - mod_ssl
          - php74-php
          - php74-php-pecl-mysql

    - name: install mod_proxy_uwsgi
      yum:
        name:
          - mod_proxy_uwsgi
      when: ansible_distribution_major_version == "7"

    - name: install helper libs
      yum:
        name:
          - python-passlib
      when: ansible_distribution_major_version == "7"

    - name: install helper libs
      yum:
        name:
          - python3-passlib
      when: ansible_distribution_major_version == "8"

    - name: create dirs
      file:
        path: "{{ app.value.httpd.user.home }}/httpd/{{ item.path }}"
        setype: "{{ item.setype|default(omit) }}"
        state: directory
        mode: 0755
      loop:
        - path: conf
          setype: httpd_config_t
        - path: bin

    - name: create user dirs
      file:
        path: "{{ app.value.httpd.user.home }}/httpd/{{ item.path }}"
        state: directory
        owner: "{{ app.value.httpd.user.user }}"
        group: "{{ app.value.httpd.user.group }}"
        setype: "{{ item.setype|default(omit) }}"
        mode: 0755
      loop:
        - path: logs
          setype: httpd_log_t
        - path: var
          setype: var_t
        - path: var/www
          setype: httpd_sys_content_t
        - path: var/www/html
          setype: httpd_sys_content_t
        - path: run
          setype: httpd_var_run_t

    - name: link modules
      file:
        state: link
        path: "{{ app.value.httpd.user.home }}/httpd/modules"
        src: /usr/lib64/httpd/modules
        setype: httpd_modules_t
        follow: false

    - name: ports
      seport:
        ports: "{{ item }}"
        proto: tcp
        setype: http_port_t
        state: present
      loop: '{{ app.value.httpd.configs.ports + app.value.httpd.vhosts|json_query("*.configs.port") }}'

    - name: add proxypassed port to selinux
      seport:
        ports: "{{ item }}"
        proto: tcp
        setype: http_port_t
        state: present
      loop: "{{ app.value.httpd.vhosts|json_query('*.locations[].proxy_pass.servers[]')|map('urlsplit', 'port') }}"

    - name: allow httpd to network connect
      seboolean:
        name: httpd_can_network_connect
        state: true
        persistent: true

    - name: www secontext
      sefcontext:
        target: '{{ app.value.httpd.user.home }}/httpd/var/www(/.*)?'
        setype: httpd_sys_content_t
        state: present

    - name: create htpasswd accounts
      include_tasks: htpasswd_users.yml
      loop: "{{ app.value.httpd.vhosts|default({}) | dict2items }}"
      loop_control:
        loop_var: _vhost

    - name: copy magic file
      template:
        src: "{{ item.path }}"
        dest: "{{ app.value.httpd.user.home }}/httpd/conf/{{ item.path }}"
        setype: "{{ item.setype|default(omit) }}"
        mode: 0644
      loop:
        - path: magic
          setype: httpd_config_t
    - name: copy config file
      template:
        src: "{{ item.path }}"
        dest: "{{ app.value.httpd.user.home }}/httpd/conf/{{ item.path }}"
        setype: "{{ item.setype|default(omit) }}"
        validate: "/usr/sbin/httpd -d {{ app.value.httpd.user.home }}/httpd/httpd/ -t -f %s"
        mode: 0644
      loop:
        - path: httpd.conf
          setype: httpd_config_t
      notify:
        - restart httpd

    - name: copy service file
      template:
        src: httpd.service
        dest: "/etc/systemd/system/{{ app.value.httpd.user.user }}-httpd-{{ app.key }}.service"
        mode: 0644
      notify:
        - restart httpd

    - meta: flush_handlers

    - name: start httpd
      systemd:
        name: "{{ app.value.httpd.user.user }}-httpd-{{ app.key }}.service"
        state: started
        enabled: true
        daemon_reload: true


  become: true
